def scrap_reddit(name, keyword):
    """
    This function is to
    scrap the posts and comments in /name subreddit, that has keyword in title, then store it into a dataframe
    """
    # create a dictionary to hold posts
    post_dict = {
        "id":[],
        "name":[],
        "subreddit":[],
        "title":[],
        "score":[],
        "num_comments":[],
        "selftext":[],
        "created_utc":[],
        "pinned":[],
        "total_awards_received":[],
        "upvote_ratio":[],
        "url":[]
    }
    # create a dictionary to hold comments in each posts
    comment_dict = {
            "comment_id":[],
            "comment_parent_id":[],
            "comment_body":[],
            "comment_link_id":[]
        }
    
    # scraping posts in the subreddit and store them in the post_dict dictionary
    # you can of course change the limit number to get as more posts
    name = reddit.subreddit(name)
    for post in name.search(keyword, limit=1000):
        post_dict["id"].append(post.id)
        post_dict["name"].append(post.name)
        post_dict["subreddit"].append(post.subreddit)
        post_dict["title"].append(post.title)
        post_dict["score"].append(post.score)
        post_dict["num_comments"].append(post.num_comments)
        post_dict["selftext"].append(post.selftext)
        post_dict["created_utc"].append(post.created_utc)
        post_dict["pinned"].append(post.pinned)
        post_dict["total_awards_received"].append(post.total_awards_received)
        post_dict["upvote_ratio"].append(post.upvote_ratio)
        post_dict["url"].append(post.url)
    
    # scraping comments in the posts and store them in the comment_dict dictionary
        post.comments.replace_more(limit=None)
        for comment in post.comments.list():
            comment_dict["comment_id"].append(comment.id)
            comment_dict["comment_parent_id"].append(comment.parent_id)
            comment_dict['comment_body'].append(comment.body)
            comment_dict['comment_link_id'].append(comment.link_id)
    # translate created_utc time into date and time    
    post_data = pd.DataFrame(post_dict)
    post_data["created date"] = pd.to_datetime(post_data["created_utc"], unit="s").dt.date
    post_data["created time"] = pd.to_datetime(post_data["created_utc"], unit="s").dt.time
    
    comment_data = pd.DataFrame(comment_dict)
    
    post_count_row = post_data.shape[0]  # Gives number of rows
    post_count_col = post_data.shape[1]  # Gives number of columns
    print("Number of posts scrapped from this subreddit is {}".format(post_count_row))
    comment_count_row = comment_data.shape[0]  # Gives number of rows
    comment_count_col = comment_data.shape[1]  # Gives number of columns
    print("Number of comments scrapped from this subreddit is {}".format(comment_count_row))
    
    comment_data.to_csv(name +"_comments_" + "subreddit.csv")
    post_data.to_csv(name+"_" + "subreddit.csv")
    
    return post_data
    return comment_data
